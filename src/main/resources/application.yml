georchestra:
  gateway:
    # configure target base URL's per service name. Replaces security-proxy's targets-mapping.properties
    target-mappings:
      analytics: http://analytics:8080/analytics/
      atlas: http://atlas:8080/atlas/
      console: http://console:8080/console/
      extractorapp: http://extractorapp:8080/extractorapp/
      geonetwork: http://geonetwork:8080/geonetwork/
      geoserver: http://geoserver:8080/geoserver/
      header: http://header:8080/header/
      mapfishapp: http://mapfishapp:8080/mapfishapp/
      geowebcache: http://geowebcache:8080/geowebcache/
      mapstore: http://mapstore:8080/mapstore/
      datafeeder: http://datafeeder:8080/datafeeder
      import: http://import:80/

server:
  port: 8080
  http2.enabled: true
  compression.enabled: true

info:
  component: Gateway Server
  instance-id: ${spring.application.name}:${spring.application.instance_id:${spring.cloud.client.ip-address}}:${server.port}

spring:
  config.import: optional:${georchestra.datadir}/default.properties,optional:${georchestra.datadir}/gateway/gateway.yaml
  main:
    banner-mode: off
    web-application-type: reactive
  application.name: gateway-service
  thymeleaf.cache: false
  security:
    oauth2:
      client:
        registration:
          google:
           clientId: 539019376623-98bfblg8t9efd507ia4qv0v7r79afits.apps.googleusercontent.com
           clientSecret: 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
           scope:
           - email
           #- openid
#          login-client:
#            provider: uaa
#            client-id: login-client
#            client-secret: secret
#            authorization-grant-type: authorization_code
#            redirect-uri-template: "{baseUrl}/login/oauth2/code/{registrationId}"
#            scope: openid,profile,email,resource.read
#        provider:
#          uaa:
#            authorization-uri: http://localhost:8090/uaa/oauth/authorize
#            token-uri: http://localhost:8090/uaa/oauth/token
#            user-info-uri: http://localhost:8090/uaa/userinfo
#            user-name-attribute: sub
#            jwk-set-uri: http://localhost:8090/uaa/token_keys
  cloud:
    gateway:
      enabled: true 
      global-filter.websocket-routing.enabled: true
      metrics.enabled: true
      default-filters:
      - TokenRelay
      - RemoveSecurityHeaders 
      - AddSecHeaders
      routes:
      - id: root
        uri: ${georchestra.gateway.target-mappings.header}
        predicates:
        - Path=/
        filters:
        - RewritePath=/, /header
      - id: header
        uri: ${georchestra.gateway.target-mappings.header}
        predicates:
        - Path=/header,/header/**
    
      - id: analytics
        uri: ${georchestra.gateway.target-mappings.analytics}
        predicates:
        - Path=/analytics/**
    
      - id: atlas
        uri: ${georchestra.gateway.target-mappings.atlas}
        predicates:
        - Path=/atlas/**
    
      - id: console
        uri: ${georchestra.gateway.target-mappings.console}
        predicates:
        - Path=/console/**
    
      - id: extractorapp
        uri: ${georchestra.gateway.target-mappings.extractorapp}
        predicates:
        - Path=/extractorapp/**
    
      - id: geonetwork
        uri: ${georchestra.gateway.target-mappings.geonetwork}
        predicates:
        - Path=/geonetwork/**
    
      - id: geoserver
        uri: ${georchestra.gateway.target-mappings.geoserver}
        predicates:
        - Path=/geoserver/**

      - id: mapfishapp
        uri: ${georchestra.gateway.target-mappings.mapfishapp}
        predicates:
        - Path=/mapfishapp/**

      - id: geowebcache
        uri: ${georchestra.gateway.target-mappings.geowebcache}
        predicates:
        - Path=/geowebcache/**

      - id: mapstore
        uri: ${georchestra.gateway.target-mappings.mapstore}
        predicates:
        - Path=/mapstore/**

      - id: datafeeder
        uri: ${georchestra.gateway.target-mappings.datafeeder}
        predicates:
        - Path=/datafeeder/**

      - id: import
        uri: ${georchestra.gateway.target-mappings.import}
        predicates:
        - Path=/import/**

management:
  info:
    build.enabled: true
    java.enabled: true
    env.enabled: true
    git:
      enabled: true
      mode: full
  endpoint:
    info.enabled: true
    metrics.enabled: true
    health.enabled: true
    health.probes.enabled: true
    prometheus.enabled: true
  endpoints:
    enabled-by-default: true
    web.exposure.include: "*"

logging:
  level:
    root: INFO
    '[org.springframework]': info
    '[org.springframework.cloud.gateway]': debug
    '[org.georchestra.gateway]': debug

